name: "imagecondition"
tag: "${rmspace:${system.prompt_processor.prompt},_}"
exp_root_dir: "outputs"
seed: 0

data_type: "single-image-datamodule"
data:
  image_path: ./load/images/hamburger_rgba.png
  height: 256
  width: 256
  default_elevation_deg: 0.0
  default_azimuth_deg: 0.0
  default_camera_distance: 3.8
  default_fovy_deg: 20.0
  requires_depth: ${cmaxgt0orcmaxgt0:${system.loss.lambda_depth},${system.loss.lambda_depth_rel}}
  requires_normal: ${cmaxgt0:${system.loss.lambda_normal}}
  random_camera:
    batch_size: 4
    height: 256
    width: 256
    eval_height: 512
    eval_width: 512
    eval_batch_size: 1
    elevation_range: [-10, 80]
    azimuth_range: [-180, 180]
    camera_distance_range: [3.8, 3.8]
    fovy_range: [20.0, 20.0] # Zero123 has fixed fovy
    progressive_until: 0
    camera_perturb: 0.0
    center_perturb: 0.0
    up_perturb: 0.0
    light_position_perturb: 1.0
    light_distance_range: [7.5, 10.0]
    eval_elevation_deg: ${data.default_elevation_deg}
    eval_camera_distance: ${data.default_camera_distance}
    eval_fovy_deg: ${data.default_fovy_deg}
    light_sample_strategy: "dreamfusion"
    batch_uniform_azimuth: False
    n_val_views: 30
    n_test_views: 120

system_type: "image-condition-dreamfusion-system"
system:
  geometry_type: "implicit-volume"
  geometry:
    radius: 2.0
    normal_type: "analytic"

    # the density initialization proposed in the DreamFusion paper
    # does not work very well
    # density_bias: "blob_dreamfusion"
    # density_activation: exp
    # density_blob_scale: 5.
    # density_blob_std: 0.2

    # use Magic3D density initialization instead
    density_bias: "blob_magic3d"
    density_activation: softplus
    density_blob_scale: 10.
    density_blob_std: 0.5

    # coarse to fine hash grid encoding
    # to ensure smooth analytic normals
    pos_encoding_config:
      otype: HashGrid
      n_levels: 16
      n_features_per_level: 2
      log2_hashmap_size: 19
      base_resolution: 16
      per_level_scale: 1.447269237440378 # max resolution 4096
    mlp_network_config:
      otype: "VanillaMLP"
      activation: "ReLU"
      output_activation: "none"
      n_neurons: 64
      n_hidden_layers: 2

  material_type: "diffuse-with-point-light-material"
  material:
    ambient_only_steps: 100000
    textureless_prob: 0.05
    albedo_activation: sigmoid

  background_type: "neural-environment-map-background"
  background:
    color_activation: sigmoid

  renderer_type: "nerf-volume-renderer"
  renderer:
    radius: ${system.geometry.radius}
    num_samples_per_ray: 512
    return_comp_normal: ${gt0:${system.loss.lambda_normal_smooth}}
    return_normal_perturb: ${gt0:${system.loss.lambda_3d_normal_smooth}}

  prompt_processor_type: "stable-diffusion-prompt-processor"
  prompt_processor:
    pretrained_model_name_or_path: "runwayml/stable-diffusion-v1-5"
    prompt: "a DSLR photo of a delicious hamburger"

  guidance_type: "stable-diffusion-guidance"
  guidance:
    pretrained_model_name_or_path: "runwayml/stable-diffusion-v1-5"
    guidance_scale: 7.5
    min_step_percent: 0.2
    # min_step_percent: [0, 0.66, 0.33, 2000]  # (start_iter, start_val, end_val, end_iter)
    max_step_percent: 0.6
    # max_step_percent: [0, 0.98, 0.66, 2000]

  # prompt_processor_type: "deep-floyd-prompt-processor"
  # prompt_processor:
  #   pretrained_model_name_or_path: "DeepFloyd/IF-I-XL-v1.0"
  #   prompt: "a DSLR photo of a delicious hamburger"

  # guidance_type: "deep-floyd-guidance"
  # guidance:
  #   pretrained_model_name_or_path: "DeepFloyd/IF-I-XL-v1.0"
  #   guidance_scale: 7.5
  #   min_step_percent: 0.2
  #   # min_step_percent: [0, 0.66, 0.33, 2000]  # (start_iter, start_val, end_val, end_iter)
  #   max_step_percent: 0.6
  #   # max_step_percent: [0, 0.98, 0.66, 2000]

  freq:
    ref_only_steps: 0
    guidance_eval: 13

  loggers:
    wandb:
      enable: false
      project: 'threestudio'
      name: None

  loss:
    lambda_sds: 0.1
    lambda_rgb: 400.0
    lambda_mask: 50.0
    lambda_depth: 0.05
    lambda_depth_rel: [0.0, 0.0, 1.0, 10000]
    lambda_normal: 0. # [0, 0, 0.05, 100]
    lambda_normal_smooth: 2.0
    lambda_3d_normal_smooth: 5.0
    lambda_orient: 0.01
    lambda_sparsity: 0.01
    lambda_opaque: 0.05

  optimizer:
    name: Adan
    args:
      lr: 0.005
      max_grad_norm: 5.0
      eps: 1.e-8
      weight_decay: 1e-5
    params:
      geometry:
        lr: ${system.optimizer.args.lr}
      background:
        lr: 0.0

trainer:
  max_steps: 2000
  log_every_n_steps: 1
  num_sanity_val_steps: 0
  val_check_interval: 20
  enable_progress_bar: true
  precision: 16-mixed

checkpoint:
  save_last: true # save at each validation time
  save_top_k: -1
  every_n_train_steps: 20 # ${trainer.max_steps}
